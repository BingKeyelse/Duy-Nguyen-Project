import threading
import time
import cv2
from pypylon import pylon
from queue import Queue

class CameraBaslerMulti:
    def __init__(self, pic_queue, mode):
        """Kh·ªüi t·∫°o class camera"""
        self.pic_queue = pic_queue
        self.mode = mode
        self.cameras = []  # Danh s√°ch camera
        self.threads = []  # Danh s√°ch lu·ªìng x·ª≠ l√Ω camera
        self.converter = None
        self.running = True  

    def begin(self):
        """M·ªü camera v√† kh·ªüi ƒë·ªông lu·ªìng ch·ª•p ·∫£nh"""
        try:
            # ‚úÖ Kh·ªüi t·∫°o danh s√°ch camera
            tlFactory = pylon.TlFactory.GetInstance()
            devices = tlFactory.EnumerateDevices()

            if len(devices) < 4:
                raise RuntimeError("üö® Kh√¥ng ƒë·ªß 4 camera!")

            # ‚úÖ M·ªü t·∫•t c·∫£ 4 camera
            for device in devices[:4]:  
                cam = pylon.InstantCamera(tlFactory.CreateDevice(device))
                cam.Open()
                cam.StopGrabbing()
                cam.StartGrabbing(pylon.GrabStrategy_LatestImageOnly)
                self.cameras.append(cam)

            # ‚úÖ C·∫•u h√¨nh trigger ph·∫ßn c·ª©ng cho t·ª´ng camera
            for cam in self.cameras:
                cam.LineSelector.SetValue('Line1')  
                cam.LineMode.SetValue('Input')

            # ‚úÖ C·∫•u h√¨nh converter ·∫£nh
            self.converter = pylon.ImageFormatConverter()
            self.converter.OutputPixelFormat = pylon.PixelType_BGR8packed
            self.converter.OutputBitAlignment = pylon.OutputBitAlignment_MsbAligned

            print("‚úÖ 4 Camera ƒë√£ s·∫µn s√†ng!")

            # ‚úÖ T·∫°o lu·ªìng x·ª≠ l√Ω ·∫£nh cho t·ª´ng camera
            for cam in self.cameras:
                thread = threading.Thread(target=self.capture_loop, args=(cam,), daemon=True)
                thread.start()
                self.threads.append(thread)

        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o camera: {e}")

    def capture_loop(self, cam):
        """Lu·ªìng ch·∫°y li√™n t·ª•c ƒë·ªÉ ki·ªÉm tra trigger v√† ch·ª•p ·∫£nh"""
        previous_status = 0
        while self.running:
            try:
                status = cam.LineStatus.GetValue()
                if status == 1 and previous_status == 0:
                    self.trigger_cam(cam)
                previous_status = status
                time.sleep(0.008)  # Gi·∫£m t·∫£i CPU

            except pylon.RuntimeException as e:
                print(f"‚ùå L·ªói trigger: {e}")
                self.reconnect_camera(cam)
                time.sleep(1)

            except Exception as e:
                print(f"‚ùå L·ªói kh√°c: {e}")
                time.sleep(1)

    def reconnect_camera(self, cam):
        """Th·ª≠ k·∫øt n·ªëi l·∫°i camera"""
        try:
            cam.Close()
            time.sleep(0.5)
            cam.Open()
            print(f"‚úÖ Camera {cam.GetDeviceInfo().GetSerialNumber()} ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!")
        except Exception as e:
            print(f"‚ö† Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i camera: {e}")

    def trigger_cam(self, cam):
        """Ch·ª•p ·∫£nh t·ª´ m·ªôt camera c·ª• th·ªÉ"""
        if cam is None or not cam.IsGrabbing():
            print("‚ö† Camera ch∆∞a s·∫µn s√†ng!")
            return

        try:
            grab_result = cam.RetrieveResult(5000, pylon.TimeoutHandling_ThrowException)
            if grab_result.GrabSucceeded():
                img = self.converter.Convert(grab_result).GetArray()
                image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

                # ‚úÖ ƒê∆∞a ·∫£nh v√†o queue
                if not self.pic_queue.full():
                    self.pic_queue.put(image)
                    print(f"üì∏ ·∫¢nh t·ª´ camera {cam.GetDeviceInfo().GetSerialNumber()} ƒë√£ g·ª≠i v·ªÅ GUI!")

        except Exception as e:
            print(f"‚ùå L·ªói ch·ª•p ·∫£nh: {e}")

    def close(self):
        """D·ª´ng camera"""
        self.running = False
        for thread in self.threads:
            thread.join()

        for cam in self.cameras:
            cam.StopGrabbing()
            cam.Close()

        print("‚úÖ 4 Camera ƒë√£ ƒë∆∞·ª£c ƒë√≥ng an to√†n.")


# ===== TEST CODE =====
if __name__ == "__main__":
    pic_queue = Queue(maxsize=10)
    camera_system = CameraBaslerMulti(pic_queue, mode="test")
    camera_system.begin()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("üõë ƒêang ƒë√≥ng camera...")
        camera_system.close()
