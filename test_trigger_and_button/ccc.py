import sys
import cv2
import time
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtGui import QImage, QPixmap
from multiprocessing import Queue
import queue
from pypylon import pylon
import threading


from test import Ui_MainWindow  # Import file giao di·ªán PyQt5

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        # ‚úÖ Kh·ªüi t·∫°o Queue ƒë·ªÉ truy·ªÅn ·∫£nh t·ª´ camera ƒë·∫øn GUI
        self.pic_queue = queue.Queue()

        # ‚úÖ Kh·ªüi t·∫°o camera Basler
        self.camera = camera_Basler_multi(self.pic_queue)
        self.camera.begin()

        # ‚úÖ K·∫øt n·ªëi n√∫t v·ªõi trigger camera
        self.ui.button.clicked.connect(self.trigger_cam)

        # ‚úÖ Ch·∫°y thread hi·ªÉn th·ªã ·∫£nh
        thread1 = threading.Thread(target=self.display, daemon=True)
        thread1.start()

    def trigger_cam(self):
        """G·ªçi trigger ƒë·ªÉ ch·ª•p ·∫£nh"""
        self.camera.trigger_cam()
    
    def display(self):
        while True:
            time.sleep(0.01)  # Tr√°nh chi·∫øm qu√° nhi·ªÅu CPU
            if not self.pic_queue.empty():
                image = self.pic_queue.get()

                initial_size = self.ui.label.size()
                resized_img2 = cv2.resize(image, (initial_size.width(), initial_size.height()), interpolation=cv2.INTER_LINEAR)
                img_height, img_width, img_channel = resized_img2.shape
                q_image = QImage(resized_img2.data, img_width, img_height, img_width * img_channel, QImage.Format.Format_RGB888)
                pixmap = QPixmap.fromImage(q_image)
                self.ui.label.setPixmap(pixmap)
    
    def closeEvent(self, event):
        print("Ng·∫Øt k·∫øt n·ªëi camera tho√°t ch∆∞∆°ng tr√¨nh")
        self.camera.close()
        event.accept()

class camera_Basler_multi:
    def __init__(self, pic_queue):
        """Kh·ªüi t·∫°o class camera"""
        self.pic_queue = pic_queue
        self.cam = None
        self.converter = None
        self.running = True  # Bi·∫øn ki·ªÉm so√°t v√≤ng l·∫∑p thread trigger

    def begin(self):
        """M·ªü camera v√† b·∫Øt ƒë·∫ßu ch·ª•p"""
        try:
            # ‚úÖ Kh·ªüi t·∫°o camera
            tlFactory = pylon.TlFactory.GetInstance()
            devices = tlFactory.EnumerateDevices()

            if len(devices) == 0:
                raise RuntimeError("üö® Kh√¥ng t√¨m th·∫•y camera!")

            self.cam = pylon.InstantCamera(pylon.TlFactory.GetInstance().CreateFirstDevice())
            self.cam.Open()
            self.cam.StartGrabbing(pylon.GrabStrategy_LatestImageOnly)

            # ‚úÖ C·∫•u h√¨nh trigger ph·∫ßn c·ª©ng
            self.cam.LineSelector.SetValue('Line1')  
            self.cam.LineMode.SetValue('Input')

            # ‚úÖ C·∫•u h√¨nh converter cho ·∫£nh
            self.converter = pylon.ImageFormatConverter()
            self.converter.OutputPixelFormat = pylon.PixelType_BGR8packed
            self.converter.OutputBitAlignment = pylon.OutputBitAlignment_MsbAligned

            print("‚úÖ Camera ƒë√£ s·∫µn s√†ng!")

            # ‚úÖ B·∫Øt ƒë·∫ßu theo d√µi t√≠n hi·ªáu trigger ph·∫ßn c·ª©ng
            self.trigger_thread = self.monitor_trigger()
            self.trigger_thread.start()

        except Exception as e:
            print(f"‚ùå L·ªói kh·ªüi t·∫°o camera: {e}")
    
    def monitor_trigger(self):
        def run():
            """Lu·ªìng ch·∫°y li√™n t·ª•c ki·ªÉm tra t√≠n hi·ªáu t·ª´ Line1"""
            previous_status = 0  # Tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥ c·ªßa Line1
            while self.running:
                try:
                    line_status = self.cam.LineStatus.GetValue()
                    if line_status == 1 and previous_status == 0:  # Ch·ªâ ch·ª•p khi c√≥ s·ª± thay ƒë·ªïi t·ª´ 0 ‚Üí 1
                        print("üéØ T√≠n hi·ªáu k√≠ch ho·∫°t! Ch·ª•p ·∫£nh...")
                        self.trigger_cam()

                    previous_status = line_status  # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                    time.sleep(0.005)  # Tr√°nh ti√™u t·ªën CPU qu√° nhi·ªÅu
                except Exception as e:
                    print(f"‚ùå L·ªói khi theo d√µi trigger: {e}")
        return  threading.Thread(target=run, daemon=True)

    def trigger_cam(self):
        """Ch·ª•p ·∫£nh t·ª´ camera"""
        if self.cam is None or not self.cam.IsGrabbing():
            print("‚ö† Camera ch∆∞a s·∫µn s√†ng!")
            return

        try:
            grab_result = self.cam.RetrieveResult(5000, pylon.TimeoutHandling_ThrowException)
            if grab_result.GrabSucceeded():
                img = self.converter.Convert(grab_result).GetArray()
                image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

                # ‚úÖ Ki·ªÉm tra tr∆∞·ªõc khi ƒë∆∞a ·∫£nh v√†o queue
                if not self.pic_queue.full():
                    self.pic_queue.put(image)
                    print("üì∏ ·∫¢nh ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ GUI!")

        except Exception as e:
            print(f"‚ùå L·ªói ch·ª•p ·∫£nh: {e}")

    def close(self):
        # self.running=False
        self.running=False
        if self.trigger_thread is not None:
            self.trigger_thread.join()
        """D·ª´ng camera"""
        self.cam.StopGrabbing()
        self.cam.Close()
        
        print("‚úÖ Camera ƒë√£ ƒë∆∞·ª£c ƒë√≥ng an to√†n.")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_win = MainWindow()
    main_win.show()
    sys.exit(app.exec())
